import streamlit as st
from deep_translator import GoogleTranslator
import openai

# Set up page configuration
st.set_page_config(
    page_title="Swarajya Scanner - Vernacular Rights Q&A",
    page_icon="ЁЯУЬ",
    layout="wide"
)

# Custom CSS for enhanced look and feel
st.markdown("""
<style>
body {
    background-color: #f4f4f9;
    color: #333;
}
h1, h3 {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    text-align: center;
}
h1 {
    color: #0050b3;
    font-weight: 700;
}
h3 {
    color: #0073e6;
    font-style: italic;
}
.stButton > button {
    background-color: #0073e6;
    color: white;
    border-radius: 8px;
    height: 3em;
    width: 100%;
    font-size: 16px;
    transition: background-color 0.3s ease;
}
.stButton > button:hover {
    background-color: #0050b3;
}
</style>
""", unsafe_allow_html=True)

# Language dictionary with translations
content = {
    "English": {
        "title": "Welcome to Swarajya Scanner! ЁЯУЬ",
        "tagline": "Give every citizen a Constitution in their pocket, and the guts to use it.",
        "intro": "Swarajya Scanner empowers you with knowledge of your constitutional rights in your vernacular language. Ask questions, get answers, and defend your rights with confidence.",
        "get_started": "Get Started",
        "how_it_works": "How It Works",
        "contact_us": "Contact Us",
        "features_title": "Key Features",
        "features": [
            "ЁЯУЪ Multilingual Q&A: Get answers in your local language.",
            "ЁЯЫб Rights Defense: Equip yourself with constitutional knowledge.",
            "ЁЯФН Easy Search: Find answers quickly and easily.",
            "ЁЯдЭ Community Support: Connect with others defending their rights.",
            "ЁЯФФ Notifications: Stay updated with relevant rights alerts."
        ],
        "footer": "┬й 2025 Swarajya Scanner. All rights reserved."
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б": {
        "title": "р░╕р▒Нр░╡р░░р░╛р░Ьр▒Нр░п р░╕р▒Нр░Хр░╛р░ир░░р▒НтАМр░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В! ЁЯУЬ",
        "tagline": "р░кр▒Нр░░р░др░┐ р░кр▒Мр░░р▒Бр░ир░┐р░Хр▒Ир░ир░╛ р░др░и р░Ьр▒Зр░мр▒Бр░▓р▒Л р░░р░╛р░Ьр▒Нр░пр░╛р░Вр░Чр░В р░Йр░Вр░бр▒З р░зр▒Ир░░р▒Нр░пр░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐.",
        "intro": "р░╕р▒Нр░╡р░░р░╛р░Ьр▒Нр░п р░╕р▒Нр░Хр░╛р░ир░░р▒Н р░ор▒Ар░Хр▒Б р░ор▒А р░╕р▒Нр░ер░╛р░ир░┐р░Х р░нр░╛р░╖р░▓р▒Л р░ор▒А р░░р░╛р░Ьр▒Нр░пр░╛р░Вр░Ч р░╣р░Хр▒Нр░Хр▒Бр░▓ р░Ьр▒Нр░Юр░╛р░ир░╛р░ир▒Нр░ир░┐ р░Зр░╕р▒Нр░др▒Бр░Вр░жр░┐. р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐, р░Ьр░╡р░╛р░мр▒Бр░▓р▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐, р░ор░░р░┐р░пр▒Б р░ор▒А р░╣р░Хр▒Нр░Хр▒Бр░▓р░ир▒Б р░ир░ор▒Нр░ор░Хр░Вр░др▒Л р░░р░Хр▒Нр░╖р░┐р░Вр░Ър░Вр░бр░┐.",
        "get_started": "р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐",
        "how_it_works": "р░Зр░жр░┐ р░Ор░▓р░╛ р░кр░ир░┐ р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐",
        "contact_us": "р░ор░╛ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐",
        "features_title": "р░кр▒Нр░░р░зр░╛р░и р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б",
        "features": [
            "ЁЯУЪ р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░ор░░р░┐р░пр▒Б р░Ьр░╡р░╛р░мр▒Б: р░ор▒А р░╕р▒Нр░ер░╛р░ир░┐р░Х р░нр░╛р░╖р░▓р▒Л р░Ьр░╡р░╛р░мр▒Бр░▓р▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐.",
            "ЁЯЫб р░╣р░Хр▒Нр░Хр▒Бр░▓ р░░р░Хр▒Нр░╖р░г: р░░р░╛р░Ьр▒Нр░пр░╛р░Вр░Ч р░Ьр▒Нр░Юр░╛р░ир░Вр░др▒Л р░╕р▒Бр░╕р░Ьр▒Нр░Ьр░┐р░др░В р░Ер░╡р▒Нр░╡р░Вр░бр░┐.",
            "ЁЯФН р░╕р▒Бр░▓р░нр░ор▒Ир░и р░╢р▒Лр░зр░и: р░др▒Нр░╡р░░р░Чр░╛ р░ор░░р░┐р░пр▒Б р░╕р▒Бр░▓р░нр░Вр░Чр░╛ р░Ьр░╡р░╛р░мр▒Бр░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐.",
            "ЁЯдЭ р░╕р░ор░╛р░Ь р░ор░жр▒Нр░жр░др▒Б: р░╣р░Хр▒Нр░Хр▒Бр░▓р░ир▒Б р░░р░Хр▒Нр░╖р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░и р░Ер░Вр░жр░░р░┐р░др▒Л р░Хр░▓р░╕р░┐ р░Йр░ир▒Нр░ир░╛р░░р▒Б.",
            "ЁЯФФ р░ир▒Лр░Яр░┐р░лр░┐р░Хр▒Зр░╖р░ир▒Нр░▓р▒Б: р░╕р░Вр░мр░Вр░зр░┐р░д р░╣р░Хр▒Нр░Хр▒Бр░▓ р░др░╛р░Ьр░╛р░╡р░╛р░░р▒Нр░др░др▒Л р░Ер░кр▒НтАМр░бр▒Зр░Яр▒Н р░Ер░╡р▒Нр░╡р░Вр░бр░┐."
        ],
        "footer": "┬й 2025 р░╕р▒Нр░╡р░░р░╛р░Ьр▒Нр░п р░╕р▒Нр░Хр░╛р░ир░░р▒Н. р░Ер░ир▒Нр░ир░┐ р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б р░╕р░Вр░░р░Хр▒Нр░╖р░┐р░др░В."
    },
    "рд╣рд┐рдиреНрджреА": {
        "title": "рд╕реНрд╡рд░рд╛рдЬреНрдп рд╕реНрдХреИрдирд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯУЬ",
        "tagline": "рд╣рд░ рдирд╛рдЧрд░рд┐рдХ рдХреЗ рдкрд╛рд╕ рд╕рдВрд╡рд┐рдзрд╛рди рд╣реЛ, рдФрд░ рдЙрд╕реЗ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рдиреЗ рдХрд╛ рд╕рд╛рд╣рд╕ рднреА рд╣реЛред",
        "intro": "рд╕реНрд╡рд░рд╛рдЬреНрдп рд╕реНрдХреИрдирд░ рдЖрдкрдХреЛ рдЖрдкрдХреА рд╕реНрдерд╛рдиреАрдп рднрд╛рд╖рд╛ рдореЗрдВ рдЖрдкрдХреЗ рд╕рдВрд╡реИрдзрд╛рдирд┐рдХ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдХрд╛ рдЬреНрдЮрд╛рди рджреЗрддрд╛ рд╣реИред рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ, рдЙрддреНрддрд░ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ, рдФрд░ рдЕрдкрдиреЗ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдХрд░реЗрдВред",
        "get_started": "рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВ",
        "how_it_works": "рдпрд╣ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ",
        "contact_us": "рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
        "features_title": "рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ",
        "features": [
            "ЁЯУЪ рдмрд╣реБрднрд╛рд╖реА рдкреНрд░рд╢реНрдиреЛрддреНрддрд░: рдЕрдкрдиреА рднрд╛рд╖рд╛ рдореЗрдВ рдЬрд╡рд╛рдм рдкрд╛рдПрдВред",
            "ЁЯЫб рдЕрдзрд┐рдХрд╛рд░ рд░рдХреНрд╖рд╛: рд╕рдВрд╡реИрдзрд╛рдирд┐рдХ рдЬреНрдЮрд╛рди рд╕реЗ рд╕реБрд╕рдЬреНрдЬрд┐рдд рд╣реЛрдВред",
            "ЁЯФН рдЖрд╕рд╛рди рдЦреЛрдЬ: рдЬрд▓реНрджреА рдФрд░ рдЖрд╕рд╛рдиреА рд╕реЗ рдЙрддреНрддрд░ рдкрд╛рдПрдВред",
            "ЁЯдЭ рд╕рдореБрджрд╛рдп рд╕рдорд░реНрдерди: рдЕрдкрдиреЗ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдХреА рд░рдХреНрд╖рд╛ рдХрд░рдиреЗ рд╡рд╛рд▓реЛрдВ рд╕реЗ рдЬреБрдбрд╝реЗрдВред",
            "ЁЯФФ рд╕реВрдЪрдирд╛рдПрдВ: рд╕рдВрдмрдВрдзрд┐рдд рдЕрдзрд┐рдХрд╛рд░реЛрдВ рд╕реЗ рдЕрдкрдбреЗрдЯ рд░рд╣реЗрдВред"
        ],
        "footer": "┬й 2025 рд╕реНрд╡рд░рд╛рдЬреНрдп рд╕реНрдХреИрдирд░ред рд╕рд░реНрд╡рд╛рдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред"
    },
    "родрооро┐ро┤рпН": {
        "title": "ро╕рпНро╡ро░ро╛роЬрпНропро╛ ро╕рпНроХрпЗройро░рпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒родрпБ! ЁЯУЬ",
        "tagline": "роТро╡рпНро╡рпКро░рпБ роХрпБроЯро┐роороХройрпБроХрпНроХрпБроорпН роЕро╡ро░рпНроХро│родрпБ роХрпИропро┐ро▓рпН роЕро░роЪроорпИрокрпНрокрпБроорпН роЕродрпИ рокропройрпНрокроЯрпБродрпНрод родрпБрогро┐ро╡рпБроорпН роЗро░рпБроХрпНроХроЯрпНроЯрпБроорпН.",
        "intro": "ро╕рпНро╡ро░ро╛роЬрпНропро╛ ро╕рпНроХрпЗройро░рпН роЙроЩрпНроХро│рпН роЙро│рпНро│рпВро░рпН роорпКро┤ро┐ропро┐ро▓рпН роЕро░роЪроорпИрокрпНрокрпБроХрпН роХрпБро▒ро┐родрпНрод роЕро▒ро┐ро╡рпИ ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ. роХрпЗро│рпНро╡ро┐роХро│рпН роХрпЗро│рпБроЩрпНроХро│рпН, рокродро┐ро▓рпНроХро│рпН рокрпЖро▒рпБроЩрпНроХро│рпН, роЙроЩрпНроХро│рпН роЙро░ро┐роорпИроХро│рпИ рокро╛родрпБроХро╛роХрпНроХро╡рпБроорпН.",
        "get_started": "родрпКроЯроЩрпНроХрпБ",
        "how_it_works": "роЗродрпБ роОрокрпНрокроЯро┐ ро╡рпЗро▓рпИ роЪрпЖропрпНроХро┐ро▒родрпБ",
        "contact_us": "роОроЩрпНроХро│рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН",
        "features_title": "роорпБроХрпНроХро┐роп роЕроорпНроЪроЩрпНроХро│рпН",
        "features": [
            "ЁЯУЪ рокро▓рпНроорпКро┤ро┐ роХрпЗро│рпНро╡ро┐-рокродро┐ро▓рпН: роЙроЩрпНроХро│рпН роорпКро┤ро┐ропро┐ро▓рпН рокродро┐ро▓рпНроХро│рпН.",
            "ЁЯЫб роЙро░ро┐роорпИроХро│рпН рокро╛родрпБроХро╛рокрпНрокрпБ: роЕро░роЪроорпИрокрпНрокрпБ роЕро▒ро┐ро╡рпБроЯройрпН роЪрооро░рпНрокро┐роХрпНроХро╡рпБроорпН.",
            "ЁЯФН роОро│ро┐роп родрпЗроЯро▓рпН: ро╡ро┐ро░рпИро╡ро╛роХ рооро▒рпНро▒рпБроорпН роОро│ро┐родро┐ро▓рпН рокродро┐ро▓рпНроХро│рпН роХро┐роЯрпИроХрпНроХрпБроорпН.",
            "ЁЯдЭ роЪроорпВроХ роЖродро░ро╡рпБ: роЙро░ро┐роорпИроХро│рпИ рокро╛родрпБроХро╛роХрпНроХрпБроорпН роХрпБро┤рпБро╡рпБроЯройрпН роЗрогрпИроирпНродро┐ро░рпБроЩрпНроХро│рпН.",
            "ЁЯФФ роЕро▒ро┐ро╡ро┐родрпНродро▓рпНроХро│рпН: родрпКроЯро░рпНрокрпБроЯрпИроп роЙро░ро┐роорпИроХро│рпН рокро▒рпНро▒ро┐роп рокрпБродрпБрокрпНрокро┐рокрпНрокрпБроХро│рпН."
        ],
        "footer": "┬й 2025 ро╕рпНро╡ро░ро╛роЬрпНропро╛ ро╕рпНроХрпЗройро░рпН. роЕройрпИродрпНродрпБ роЙро░ро┐роорпИроХро│рпБроорпН ┘Е╪н┘Б┘И╪╕."
    },
    "р▓Хр▓ир│Нр▓ир▓б": {
        "title": "р▓╕р│Нр▓╡р▓░р▓╛р▓Ьр│Нр▓п р▓╕р│Нр▓Хр│Нр▓пр▓╛р▓ир▓░р│НтАМр▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д! ЁЯУЬ",
        "tagline": "р▓кр│Нр▓░р▓др▓┐ р▓ир▓╛р▓Чр▓░р▓┐р▓Хр▓ир▓┐р▓Чр│Ж р▓Ер▓╡р▓░ р▓Цр│Ир▓▓р▓┐р▓пр▓▓р│Нр▓▓р▓┐ р▓╕р▓Вр▓╡р▓┐р▓зр▓╛р▓и р▓ор▓др│Нр▓др│Б р▓Ер▓жр▓ир│Нр▓ир│Б р▓мр▓│р▓╕р│Бр▓╡ р▓зр│Ир▓░р│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓ир│Ар▓бр▓┐.",
        "intro": "р▓╕р│Нр▓╡р▓░р▓╛р▓Ьр│Нр▓п р▓╕р│Нр▓Хр▓╛р▓ир▓░р│Н р▓ир▓┐р▓ор│Нр▓о р▓╕р│Нр▓ер▓│р│Ар▓п р▓нр▓╛р▓╖р│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор│Нр▓о р▓╕р▓Вр▓╡р▓┐р▓зр▓╛р▓ир▓ж р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓др▓┐р▓│р▓┐р▓╕р│Бр▓др│Нр▓др▓жр│Ж. р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐, р▓Йр▓др│Нр▓др▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐, р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓ор│Нр▓о р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓░р▓Хр│Нр▓╖р▓┐р▓╕р▓┐.",
        "get_started": "р▓кр│Нр▓░р▓╛р▓░р▓Вр▓нр▓┐р▓╕р▓┐",
        "how_it_works": "р▓Зр▓жр│Б р▓╣р│Зр▓Чр│Ж р▓Хр│Жр▓▓р▓╕ р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓жр│Ж",
        "contact_us": "р▓ир▓ор│Нр▓ор▓ир│Нр▓ир│Б р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р▓┐",
        "features_title": "р▓кр│Нр▓░р▓ор│Бр▓Ц р▓╡р│Ир▓╢р▓┐р▓╖р│Нр▓Яр│Нр▓пр▓Чр▓│р│Б",
        "features": [
            "ЁЯУЪ р▓мр▓╛р▓╣р│Бр▓нр▓╛р▓╖р▓╛ р▓кр│Нр▓░р▓╢р│Нр▓ир│Лр▓др│Нр▓др▓░: р▓ир▓┐р▓ор│Нр▓о р▓нр▓╛р▓╖р│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓Йр▓др│Нр▓др▓░ р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐.",
            "ЁЯЫб р▓╣р▓Хр│Нр▓Хр│Б р▓░р▓Хр│Нр▓╖р▓гр│Ж: р▓╕р▓Вр▓╡р▓┐р▓зр▓╛р▓ир▓ж р▓Ьр│Нр▓Юр▓╛р▓ир▓жр▓┐р▓Вр▓ж р▓╕р▓Ьр│Нр▓Ьр▓╛р▓Чр▓┐р▓░р▓┐.",
            "ЁЯФН р▓╕р│Бр▓▓р▓н р▓╢р│Лр▓зр▓ир│Ж: р▓др│Нр▓╡р▓░р▓┐р▓д р▓ор▓др│Нр▓др│Б р▓╕р│Бр▓▓р▓нр▓╡р▓╛р▓Чр▓┐ р▓Йр▓др│Нр▓др▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр▓Вр▓бр│Бр▓╣р▓┐р▓бр▓┐р▓пр▓┐р▓░р▓┐.",
            "ЁЯдЭ р▓╕р▓ор│Бр▓жр▓╛р▓п р▓мр│Жр▓Вр▓мр▓▓: р▓ир▓┐р▓ор│Нр▓о р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓╣р│Лр▓░р▓╛р▓Я р▓╡р│Жр▓мр│Нр▓мр▓╛р▓Чр▓┐р▓░р│Б.",
            "ЁЯФФ р▓╕р│Вр▓Ър▓ир│Жр▓Чр▓│р│Б: р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│ р▓ир▓╡р│Ар▓Хр▓░р▓гр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐."
        ],
        "footer": "┬й 2025 р▓╕р│Нр▓╡р▓░р▓╛р▓Ьр│Нр▓п р▓╕р│Нр▓Хр▓╛р▓ир▓░р│Н. р▓Ор▓▓р│Нр▓▓р▓╛ р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р│Б р▓╕р▓Вр▓░р▓Хр│Нр▓╖р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж."
    },
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": {
        "title": "р┤╕р╡Нр┤╡р┤░р┤╛р┤Ьр╡Нр┤п р┤╕р╡Нр┤Хр┤╛р┤ир┤▒р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В! ЁЯУЬ",
        "tagline": "р┤Ор┤▓р╡Нр┤▓р┤╛ р┤кр╡Чр┤░р┤ир╡Бр┤В р┤Ер┤╡р┤░р╡Бр┤Яр╡Ж р┤Хр┤пр╡Нр┤пр┤┐р╡╜ р┤нр┤░р┤гр┤Шр┤Яр┤ир┤пр╡Бр┤В р┤Ер┤др╡Н р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и р┤зр╡Ир┤░р╡Нр┤пр┤╡р╡Бр┤В р┤Хр╡Ир┤╡р┤░р╡Бр┤др╡Нр┤др╡Бр┤Х.",
        "intro": "р┤╕р╡Нр┤╡р┤░р┤╛р┤Ьр╡Нр┤п р┤╕р╡Нр┤Хр┤╛р┤ир╡╝ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р╡Нр┤╡р┤ир╡Нр┤др┤В р┤нр┤╛р┤╖р┤пр┤┐р╡╜ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤нр┤░р┤гр┤Шр┤Яр┤ир┤╛р┤кр┤░р┤ор┤╛р┤п р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤╡р┤┐р┤╡р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤Ър╡Лр┤жр┤┐р┤Хр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х, р┤Йр┤др╡Нр┤др┤░р┤Щр╡Нр┤Щр╡╛ р┤ир╡Зр┤Яр╡Бр┤Х, р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр╡╛ р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
        "get_started": "р┤кр╡Нр┤░р┤╛р┤░р┤Вр┤нр┤В",
        "how_it_works": "р┤Зр┤др╡Н р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б",
        "contact_us": "р┤Юр┤Щр╡Нр┤Щр┤│р╡Ж р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤Х",
        "features_title": "р┤кр╡Нр┤░р┤зр┤╛р┤и р┤╕р┤╡р┤┐р┤╢р╡Зр┤╖р┤др┤Хр╡╛",
        "features": [
            "ЁЯУЪ р┤мр┤╣р╡Бр┤нр┤╛р┤╖р┤╛ р┤Ър╡Лр┤жр╡Нр┤пр╡Лр┤др╡Нр┤др┤░р┤Щр╡Нр┤Щр╡╛: р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤нр┤╛р┤╖р┤пр┤┐р╡╜ р┤Йр┤др╡Нр┤др┤░р┤Щр╡Нр┤Щр╡╛ р┤▓р┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤В.",
            "ЁЯЫб р┤Ер┤╡р┤Хр┤╛р┤╢ р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤гр┤В: р┤нр┤░р┤гр┤Шр┤Яр┤ир┤╛р┤кр┤░р┤ор┤╛р┤п р┤Ер┤▒р┤┐р┤╡р╡Н р┤ир╡╜р┤Хр╡Бр┤ир╡Нр┤ир╡Б.",
            "ЁЯФН р┤Ор┤│р╡Бр┤кр╡Нр┤кр┤ор╡Бр┤│р╡Нр┤│ р┤др┤┐р┤░р┤Ър╡Нр┤Ър┤┐р╡╜: р┤╡р╡Зр┤Чр┤др╡Нр┤др┤┐р╡╜ р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤Йр┤др╡Нр┤др┤░р┤Щр╡Нр┤Щр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х.",
            "ЁЯдЭ р┤╕р┤ор╡Бр┤жр┤╛р┤п р┤кр┤┐р┤ир╡Нр┤др╡Бр┤г: р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр╡╛ р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и р┤Хр╡Вр┤Яр╡Нр┤Яр┤╛р┤пр╡Нр┤о.",
            "ЁЯФФ р┤Ер┤▒р┤┐р┤пр┤┐р┤кр╡Нр┤кр╡Бр┤Хр╡╛: р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤кр╡Нр┤бр╡Зр┤▒р╡Нр┤▒р╡Бр┤Хр╡╛."
        ],
        "footer": "┬й 2025 р┤╕р╡Нр┤╡р┤░р┤╛р┤Ьр╡Нр┤п р┤╕р╡Нр┤Хр┤╛р┤ир╡╝. р┤Ор┤▓р╡Нр┤▓р┤╛ р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤┐р┤Ър╡Нр┤Ър┤┐р┤Яр╡Нр┤Яр╡Бр┤гр╡Нр┤Яр╡Н."
    },
    "╪з╪▒╪п┘И": {
        "title": "╪│┘И╪з╪м█М█Б ╪│┌й█М┘Ж╪▒ ┘Е█М┌║ ╪о┘И╪┤ ╪в┘Е╪п█М╪п! ЁЯУЬ",
        "tagline": "█Б╪▒ ╪┤█Б╪▒█М ┌й█Т ┘╛╪з╪│ ╪з┘╛┘Ж█Т ┘╛╪з╪│ ╪в╪ж█М┘Ж █Б┘И╪М ╪з┘И╪▒ ╪з╪│█Т ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒┘Ж█Т ┌й╪з ╪м╪▒╪з╪к ╪и┌╛█М █Б┘И█Ф",
        "intro": "╪│┘И╪з╪м█М█Б ╪│┌й█М┘Ж╪▒ ╪в┘╛ ┌й┘И ╪в┘╛ ┌й█Т ┘Е┘В╪з┘Е█М ╪▓╪и╪з┘Ж ┘Е█М┌║ ╪в╪ж█М┘Ж█М ╪н┘В┘И┘В ┌й╪з ╪╣┘Д┘Е ╪п█М╪к╪з █Б█Т█Ф ╪│┘И╪з┘Д╪з╪к ┘╛┘И┌Ж┌╛█М┌║╪М ╪м┘И╪з╪и╪з╪к ╪н╪з╪╡┘Д ┌й╪▒█М┌║╪М ╪з┘И╪▒ ╪з┘╛┘Ж█Т ╪н┘В┘И┘В ┌й╪з ╪п┘Б╪з╪╣ ┌й╪▒█М┌║█Ф",
        "get_started": "╪┤╪▒┘И╪╣ ┌й╪▒█М┌║",
        "how_it_works": "█М█Б ┌й█М╪│█Т ┌й╪з┘Е ┌й╪▒╪к╪з █Б█Т",
        "contact_us": "█Б┘Е ╪│█Т ╪▒╪з╪и╪╖█Б ┌й╪▒█М┌║",
        "features_title": "╪з█Б┘Е ╪о╪╡┘И╪╡█М╪з╪к",
        "features": [
            "ЁЯУЪ ┌й╪л█М╪▒╪з┘Д┘Д╪│╪з┘Ж█М ╪│┘И╪з┘Д ┘И ╪м┘И╪з╪и: ╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е█М┌║ ╪м┘И╪з╪и ╪н╪з╪╡┘Д ┌й╪▒█М┌║█Ф",
            "ЁЯЫб ╪н┘В┘И┘В ┌й╪з ╪п┘Б╪з╪╣: ╪в╪ж█М┘Ж█М ╪╣┘Д┘Е ╪│█Т ╪о┘И╪п ┌й┘И ┘Д█М╪│ ┌й╪▒█М┌║█Ф",
            "ЁЯФН ╪в╪│╪з┘Ж ╪к┘Д╪з╪┤: ╪м┘Д╪п█М ╪з┘И╪▒ ╪в╪│╪з┘Ж█М ╪│█Т ╪м┘И╪з╪и ╪к┘Д╪з╪┤ ┌й╪▒█М┌║█Ф",
            "ЁЯдЭ ┌й┘Е█М┘И┘Ж┘╣█М ╪│┘╛┘И╪▒┘╣: ╪з┘╛┘Ж█Т ╪н┘В┘И┘В ┌й█Т ╪п┘Б╪з╪╣ ┘Е█М┌║ ╪п┘И╪│╪▒┘И┌║ ╪│█Т ╪м┌С█М┌║█Ф",
            "ЁЯФФ ╪з╪╖┘Д╪з╪╣╪з╪к: ┘Е╪к╪╣┘Д┘В█Б ╪н┘В┘И┘В ┌й█М ╪к╪з╪▓█Б ╪к╪▒█М┘Ж ┘Е╪╣┘Д┘И┘Е╪з╪к ╪н╪з╪╡┘Д ┌й╪▒█М┌║█Ф"
        ],
        "footer": "┬й 2025 ╪│┘И╪з╪м█М█Б ╪│┌й█М┘Ж╪▒█Ф ╪м┘Е┘Д█Б ╪н┘В┘И┘В ┘Е╪н┘Б┘И╪╕ █Б█М┌║█Ф"
    }
}

# Language selector in sidebar
language = st.sidebar.selectbox("Select your language | рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ | р░ор▒А р░нр░╛р░╖ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐", options=list(content.keys()))

# Retrieve the content based on language selection
langs = content[language]

# Hero section with title and tagline
st.markdown(f"<h1>{langs['title']}</h1>", unsafe_allow_html=True)
st.markdown(f"<h3>{langs['tagline']}</h3>", unsafe_allow_html=True)
st.write("")

# Thematic image - same for all languages, replace URL with your desired image
col1, col2, col3 = st.columns([1, 2, 1])

with col2:
    st.image("Image.png", width=600)
st.write("")

# Introduction
st.markdown(f"{langs['intro']}")
st.write("")

# Navigation buttons with friendly messages (you can replace with navigation logic)
col1, col2, col3 = st.columns(3)
with col1:
    if st.button(langs["get_started"]):
        st.success("ЁЯЪА " + langs["get_started"] + " clicked. Redirecting soon...")
with col2:
    if st.button(langs["how_it_works"]):
        st.info(langs["how_it_works"] + " selected. More info coming here.")
with col3:
    if st.button(langs["contact_us"]):
        st.warning(langs["contact_us"] + " clicked. Contact form or info can be added here.")

st.markdown("---")

# Features section
st.markdown(f"## {langs['features_title']}")
for feature in langs["features"]:
    st.markdown(f"- {feature}")

st.markdown("---")

# Footer
st.markdown(f"<p style='text-align: center; '>{langs['footer']}</p>", unsafe_allow_html=True)




# Language map
lang_map = {
    "English": "en",
    "р░др▒Жр░▓р▒Бр░Чр▒Б": "te",
    "рд╣рд┐рдиреНрджреА": "hi",
    "родрооро┐ро┤рпН": "ta",
    "р▓Хр▓ир│Нр▓ир▓б": "kn",
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": "ml",
    "╪з╪▒╪п┘И": "ur"
}

# Chatbot toggle
if "show_chatbot" not in st.session_state:
    st.session_state.show_chatbot = False
if "messages" not in st.session_state:
    st.session_state.messages = [("bot", "Hello! How can I assist you today?")]

# Style toggle button bottom-right
toggle_button_css = """
    <style>
    .toggle-btn {
      position: fixed;
      right: 20px;
      bottom: 20px;
      z-index: 9999;
      background-color: #0073e6;
      color: white;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      font-size: 24px;
      border: none;
      cursor: pointer;
    }
    .chatbot-box {
      position: fixed;
      right: 20px;
      bottom: 80px;
      z-index: 9999;
      width: 360px;
      height: 500px;
      background: white;
      border-radius: 15px;
      box-shadow: 0 6px 20px rgba(0,0,0,0.15);
      padding: 10px;
      overflow-y: auto;
    }
    .message-user {
      background:#e3f2fd;
      padding:8px 12px;
      border-radius:10px;
      margin-bottom:8px;
      max-width:80%;
      align-self:flex-start;
    }
    .message-bot {
      background:#f4f4f9;
      padding:8px 12px;
      border-radius:10px;
      margin-bottom:8px;
      max-width:80%;
      align-self:flex-end;
    }
    </style>
"""
st.markdown(toggle_button_css, unsafe_allow_html=True)



# Add a toggle button in the sidebar
if "dark_mode" not in st.session_state:
    st.session_state.dark_mode = False

dark_mode = st.sidebar.toggle("ЁЯМЩ Dark Mode", value=st.session_state.dark_mode)
st.session_state.dark_mode = dark_mode

# Inject CSS based on dark_mode state
if st.session_state.dark_mode:
    st.markdown("""
        <style>
        body, .stApp, h1, h2, h3, h4, h5, h6, p, li, .markdown-text-container, .chatbot-box, .message-user, .message-bot {
            color: #f4f4f9 !important;
        }
        body, .stApp {
            background-color: #181818 !important;
        }
        .stSidebar, .stSidebar * {
            color: #fff !important;
        }
        .stButton > button, .stTextInput > div > input {
            background-color: #333 !important;
            color: #f4f4f9 !important;
        }
        .chatbot-box {
            background: #222 !important;
        }
        .message-user, .message-bot {
            background: #333 !important;
            color: #f4f4f9 !important;
        }
        </style>
    """, unsafe_allow_html=True)
else:
    st.markdown("""
        <style>
        body, .stApp, h1, h2, h3, h4, h5, h6, p, li, .markdown-text-container, .chatbot-box, .message-user, .message-bot {
            color: #222 !important;
        }
        body, .stApp {
            background-color: #f4f4f9 !important;
        }
        .stSidebar, .stSidebar * {
            color: #fff !important;
        }
        .stButton > button, .stTextInput > div > input {
            background-color: #0073e6 !important;
            color: white !important;
        }
        .chatbot-box {
            background: #fff !important;
        }
        .message-user {
            background: #e3f2fd !important;
            color: #222 !important;
        }
        .message-bot {
            background: #f4f4f9 !important;
            color: #222 !important;
        }
        </style>
    """, unsafe_allow_html=True)
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

st.title("ЁЯЧи AI Chatbot")

# Toggle to show/hide chatbot
show_chat = st.checkbox("Open Chatbot", value=False)

if show_chat:
    # User input form
    with st.form("chat_form", clear_on_submit=True):
        user_message = st.text_input("Your message:")
        submit = st.form_submit_button("Send")

    if submit and user_message.strip():
        # Append user message
        st.session_state.chat_history.append(("You", user_message.strip()))

        # Dummy bot response (replace with AI or your logic)
        bot_response = f"Echo: {user_message.strip()}"
        st.session_state.chat_history.append(("Bot", bot_response))

    # Display chat history
    st.markdown("### Chat History")
    for sender, msg in st.session_state.chat_history:
        if sender == "You":
            st.markdown(f"*You:* {msg}")
        else:
            st.markdown(f"*Bot:* {msg}")

else:
    st.write("Chatbot is hidden. Use the checkbox above to show it.")